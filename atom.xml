<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>朝辞</title>
  
  
  <link href="http://119.23.250.219/atom.xml" rel="self"/>
  
  <link href="http://119.23.250.219/"/>
  <updated>2022-03-25T09:32:40.224Z</updated>
  <id>http://119.23.250.219/</id>
  
  <author>
    <name>朝辞</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>AJAX_1</title>
    <link href="http://119.23.250.219/2022/03/25/AJAX-1/"/>
    <id>http://119.23.250.219/2022/03/25/AJAX-1/</id>
    <published>2022-03-25T08:32:45.000Z</published>
    <updated>2022-03-25T09:32:40.224Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ajax内部是咋写的"><a href="#ajax内部是咋写的" class="headerlink" title="ajax内部是咋写的"></a>ajax内部是咋写的</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> oBtn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn1&#x27;</span>);</span><br><span class="line">       oBtn.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">           <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">           </span><br><span class="line">           <span class="comment">//连接请求</span></span><br><span class="line">           xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;1.php?a=12&amp;b=5&#x27;</span>,<span class="literal">true</span>)</span><br><span class="line">           </span><br><span class="line">           </span><br><span class="line"><span class="comment">//发送请求</span></span><br><span class="line">           xhr.<span class="title function_">send</span>()</span><br><span class="line">           </span><br><span class="line">           <span class="comment">//接收请求</span></span><br><span class="line">           xhr.<span class="property">onreadystatechange</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">               <span class="comment">//readyState的值表示目前通信处于什么状态</span></span><br><span class="line">               <span class="comment">//0初始化-刚刚创建</span></span><br><span class="line">               <span class="comment">//1以连接</span></span><br><span class="line">               <span class="comment">//2已发送</span></span><br><span class="line">               <span class="comment">//3已接收-头</span></span><br><span class="line">               <span class="comment">//4已接收-主体内容</span></span><br><span class="line">               <span class="title function_">alert</span>(xhr.<span class="property">readyState</span>)</span><br><span class="line">               <span class="comment">//不管请求成果或者失败，都会执行完4的内容</span></span><br><span class="line">               <span class="comment">//这时候需要用到http状态码了</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="http状态码-status"><a href="#http状态码-status" class="headerlink" title="http状态码(status)"></a>http状态码(status)</h2><p>游览器和服务器之间通过数字来表明状态,这个数字就是http状态码</p><p>1xx        消息</p><p>2xx        成功</p><p>3xx        重定向：原来的地址更改到了新的地址                        </p><p>​        301：永久重定向-游览器不会再次请求老的地址</p><p>​        302：临时重定向-游览器下次还会请求老地址</p><p>​        304：缓存</p><p>4xx        请求错误（客户端）</p><p>5xx        服务端错误</p><p>6xx        拓展</p><p>所以，想要知道是否成功，就要看状态码是否是2xx或者304</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="property">onreadystatechange</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">               <span class="keyword">if</span>(xhr.<span class="property">readyState</span>==<span class="number">4</span>)&#123;</span><br><span class="line">               <span class="keyword">if</span>((xhr.<span class="property">status</span>&gt;=<span class="number">200</span>&amp;&amp;xhr.<span class="property">status</span>&lt;=<span class="number">300</span>)||xhr.<span class="property">status</span>==<span class="number">304</span>)&#123;</span><br><span class="line">               <span class="title function_">alert</span>(<span class="string">&#x27;成功&#x27;</span>)</span><br><span class="line">               &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="title function_">alert</span>(<span class="string">&#x27;失败&#x27;</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p><img src="/../image/ajax/1.png" alt="image"></p><p>改成1.php就能成功了</p><p><img src="/../image/ajax/2.png" alt="image"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ajax内部是咋写的&quot;&gt;&lt;a href=&quot;#ajax内部是咋写的&quot; class=&quot;headerlink&quot; title=&quot;ajax内部是咋写的&quot;&gt;&lt;/a&gt;ajax内部是咋写的&lt;/h1&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;</summary>
      
    
    
    
    
    <category term="AJAX" scheme="http://119.23.250.219/tags/AJAX/"/>
    
  </entry>
  
  <entry>
    <title>async/await操作</title>
    <link href="http://119.23.250.219/2022/03/24/async-await%E6%93%8D%E4%BD%9C/"/>
    <id>http://119.23.250.219/2022/03/24/async-await%E6%93%8D%E4%BD%9C/</id>
    <published>2022-03-24T07:47:25.000Z</published>
    <updated>2022-03-24T08:09:08.191Z</updated>
    
    <content type="html"><![CDATA[<h2 id="async-x2F-await操作"><a href="#async-x2F-await操作" class="headerlink" title="async&#x2F;await操作"></a>async&#x2F;await操作</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">let</span> 结果=<span class="keyword">await</span> 异步操作-promise，generator，另一个<span class="keyword">async</span>函数</span><br><span class="line">    <span class="keyword">let</span> 结果=<span class="keyword">await</span> 异步操作-promise，generator，另一个<span class="keyword">async</span>函数</span><br><span class="line">    <span class="keyword">let</span> 结果=<span class="keyword">await</span> 异步操作-promise，generator，另一个<span class="keyword">async</span>函数</span><br><span class="line">    <span class="comment">//和generator用法类似,可以处理多个异步请求，可以不用前面的premise.all</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;async-x2F-await操作&quot;&gt;&lt;a href=&quot;#async-x2F-await操作&quot; class=&quot;headerlink&quot; title=&quot;async&amp;#x2F;await操作&quot;&gt;&lt;/a&gt;async&amp;#x2F;await操作&lt;/h2&gt;&lt;figure cla</summary>
      
    
    
    
    
    <category term="js" scheme="http://119.23.250.219/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js_es6面向对象</title>
    <link href="http://119.23.250.219/2022/03/23/js-es6%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>http://119.23.250.219/2022/03/23/js-es6%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</id>
    <published>2022-03-23T07:36:50.000Z</published>
    <updated>2022-03-24T01:36:28.126Z</updated>
    
    <content type="html"><![CDATA[<h1 id="es6面向对象"><a href="#es6面向对象" class="headerlink" title="es6面向对象"></a>es6面向对象</h1><p>es6的面向对象相对于传统js面向对象方便了很多</p><p>不需要用function来创建一个类</p><p>和java类似</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> 对象名&#123;</span><br><span class="line"><span class="title class_">Constructor</span>()&#123;</span><br><span class="line">这里写属性</span><br><span class="line">&#125;</span><br><span class="line">    这里写函数</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../image/es6%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1.png" alt="image"></p><h2 id="es6的继承"><a href="#es6的继承" class="headerlink" title="es6的继承"></a>es6的继承</h2><p>Es6通过super来继承父类的属性</p><p>父类的方法通过extends来继承</p><p><img src="/../image/es6%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/3.png" alt="image"></p><p><img src="/../image/es6%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/2.png" alt="image"></p><h2 id="es6面向对象的this"><a href="#es6面向对象的this" class="headerlink" title="es6面向对象的this"></a>es6面向对象的this</h2><p>js的this容易被改变，这里本来应该显示blue的，但this现在指向了document</p><p><img src="/../image/es6%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/4.png" alt="image"></p><p>修改的方法是在对象的方法后面，跟上一个bind（blue）</p><p>这里修改成blue.showName.bind(blue)</p><p>bind是强制改变this的指向</p><p>bind的可以修改this指向的对象</p><p>和js的call这个方法类似</p><h2 id="箭头函数和普通函数的区别"><a href="#箭头函数和普通函数的区别" class="headerlink" title="箭头函数和普通函数的区别"></a>箭头函数和普通函数的区别</h2><p>箭头函数：根据我所在的环境，环境是谁this就是谁</p><p><img src="/../image/es6%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/5.png" alt="image"></p><p>这里别的实例对象用这个方法的时候，就不需要要用bind来改变指向了，这里this处在哪个环境，this就是谁</p><p><img src="/../image/es6%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/6.png" alt="image"></p><p>普通函数：谁在调用this，this就是谁</p><p>上一节点击事件的错误就是因为是普通函数的缘故，this指向了document。</p><h2 id="Promise对象"><a href="#Promise对象" class="headerlink" title="Promise对象"></a>Promise对象</h2><p>拥有同步的简便，和异步的优点</p><p>有两个参数resolve和reject</p><p>resolve：成功之后调用的函数</p><p>reject：失败之后调用的函数</p><p><img src="/../image/es6%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/7.png" alt="image"></p><p>promise这个对象里面能执行一些方法和语句，执行完成后，resolve和reject都会将括号里的值返回出去</p><p>promise有局限性</p><ol><li>promise有用-解除异步操作</li><li>有局限-带逻辑的异步操作很麻烦</li></ol><h3 id="promise"><a href="#promise" class="headerlink" title="promise-"></a>promise-</h3><p>promise-race(||的作用)</p><p>promise-all(&amp;&amp;的作用)</p><p>能获取多个地址的数据</p><p><img src="/../image/es6%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/8.png" alt="image"></p><p>Promise.all([pro对象1，pro对象2……]).then()</p><p>all能获取promise的集合，可以用数组的形式将这三个对象存起来</p><p><img src="/../image/es6%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/9.png" alt="image"></p><p>因为jQuery的Ajax返回的对象里面，带有Promise，所以这里all里面的对象可以直接用jQuery的Ajax表达式来使用</p><p><img src="/../image/es6%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/10.png" alt="image"></p><h2 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h2><p>回调：有结果之后来找你</p><ol><li>不是定义的人调用</li><li>什么时候调用不知道</li></ol><p>轮询：一直询问</p><h2 id="generator函数"><a href="#generator函数" class="headerlink" title="generator函数"></a>generator函数</h2><p>Function *show(){}</p><p>函数名前面加一个*号</p><p>gen函数与普通函数的区别是能暂停</p><p>并且用yield来分块</p><p><img src="/../image/es6%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/11.png" alt="image"></p><p>这儿已经被分成两块了</p><p>gen函数直接使用不会生效，而是会产生一个返回值,这里将show这个对象给了fan</p><p><img src="/../image/es6%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/12.png" alt="image"></p><p>要执行show里面的语句，需要用next这个方法来驱动</p><p>next会在yield之前停下，如果要执行yield后面的语句，需要在调用一下next的方法</p><p>这样的好处是，有些异步操作需要时间，然后可以使用yield来分块，当异步操作执行完毕后，在执行后面的语句</p><p><img src="/../image/es6%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/13.png" alt="image"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;es6面向对象&quot;&gt;&lt;a href=&quot;#es6面向对象&quot; class=&quot;headerlink&quot; title=&quot;es6面向对象&quot;&gt;&lt;/a&gt;es6面向对象&lt;/h1&gt;&lt;p&gt;es6的面向对象相对于传统js面向对象方便了很多&lt;/p&gt;
&lt;p&gt;不需要用function来创建一个类</summary>
      
    
    
    
    
    <category term="js" scheme="http://119.23.250.219/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js面向对象</title>
    <link href="http://119.23.250.219/2022/03/21/js%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>http://119.23.250.219/2022/03/21/js%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</id>
    <published>2022-03-21T08:39:34.000Z</published>
    <updated>2022-03-23T07:36:29.655Z</updated>
    
    <content type="html"><![CDATA[<h1 id="js面向对象"><a href="#js面向对象" class="headerlink" title="js面向对象"></a>js面向对象</h1><blockquote><p><a href="https://www.jianshu.com/p/f9792fdd9915">参考了该文章：JavaScript面向对象 - 简书 (jianshu.com)</a></p></blockquote><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function createCar(color,wheel)&#123;//createCar工厂</span><br><span class="line">    var obj = new Object;//或obj = &#123;&#125; 原材料阶段</span><br><span class="line">    obj.color = color;//加工</span><br><span class="line">    obj.wheel = wheel;//加工</span><br><span class="line">    return obj;//输出产品</span><br><span class="line">&#125;</span><br><span class="line">//实例化</span><br><span class="line">var cat1 = createCar(&quot;红色&quot;,&quot;4&quot;);</span><br><span class="line">var cat2 = createCar(&quot;蓝色&quot;,&quot;4&quot;);</span><br><span class="line"></span><br><span class="line">alert(cat1.color);//红色</span><br></pre></td></tr></table></figure><p>工厂模式对传入的值进行加工，然后输出</p><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p><strong>构造函数就是类</strong></p><p>构造函数用于写属性</p><p><img src="/../image/js%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1.png" alt="image"></p><p>当我们new这个类的时候，这里的name和sex会作为属性一并被赋给obj3</p><p><img src="/../image/js%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/2.png" alt="image"></p><p>我这儿构造函数的命名不规范，应该首字母大写</p><h2 id="原型（prototype）"><a href="#原型（prototype）" class="headerlink" title="原型（prototype）"></a>原型（prototype）</h2><p><em>每个函数都有一个属性——</em><em><strong>prototype</strong></em><em>。这个</em><em><strong>prototype</strong></em><em>的属性值是一个对象（属性的集合），默认只有一个叫做</em><em><strong>constructor</strong></em><em>的属性，指向这个函数本身</em>*</p><p><img src="/../image/js%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/3.png" alt="image"></p><p>这里是给createPre类，添加一个showName的方法，然后后面创建实例化对象（obj3）的时候，这个obj3会有这个方法</p><p><img src="/../image/js%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/4.png" alt="image"></p><h2 id="构造函数和原型的用法"><a href="#构造函数和原型的用法" class="headerlink" title="构造函数和原型的用法"></a>构造函数和原型的用法</h2><p>构造函数里面加属性，原型里面加方法</p><p><img src="/../image/js%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/5.png" alt="image"></p><p><strong>这里再放一张容易理解对象的图</strong></p><p><img src="/../image/js%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/6.png" alt="image"></p><p><img src="/../image/js%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/7.png" alt="image"></p><p>这里的不同颜色的车和不同种类的狗，就是new出来的实例对象</p><h2 id="命令空间"><a href="#命令空间" class="headerlink" title="命令空间"></a>命令空间</h2><p><img src="/../image/js%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/8.png" alt="image"></p><p>不同对象，相同方法</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>js通过call方法来继承父元素的属性</p><p>call方法：可以改变函数执行的时候，里面的this </p><p><img src="/../image/js%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/9.png" alt="image"></p><p>call可以传参数，这里的this就是show2这个对象</p><p>call将show2这个对象传入show</p><p>然后将show里面this指向指为show2</p><h3 id="继承的问题"><a href="#继承的问题" class="headerlink" title="继承的问题"></a>继承的问题</h3><p>这里举个栗子</p><p><img src="/../image/js%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/10.png" alt="image"></p><p>这里arr2并不是复制了一份arr1，而是将arr2也指向了arr1的空间了</p><p>他们都指向了同一块空间</p><p> <img src="/../image/js%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/14.png" alt="image"></p><p>可以看见这个arr1里面的数据也被更改了</p><p>解决这个问题的方法是，用循环将arr1里面的数据传入arr2</p><p><img src="/../image/js%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/11.png" alt="image"></p><p>对象里面，方法的继承也存在同样的问题</p><p><img src="/../image/js%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/13.png" alt="image"></p><p>这样做的话，会和上面数组的问题一样，修改show2的方法，show的方法也会被修改</p><p><img src="/../image/js%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/12.png" alt="image"></p><p>这样就不会出问题了</p><h2 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h2><p><img src="/../image/js%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/15.png" alt="image"></p><p>重写就是将新的原型里面的方法，给重新写一遍</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;js面向对象&quot;&gt;&lt;a href=&quot;#js面向对象&quot; class=&quot;headerlink&quot; title=&quot;js面向对象&quot;&gt;&lt;/a&gt;js面向对象&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/f9792f</summary>
      
    
    
    
    <category term="JS" scheme="http://119.23.250.219/categories/JS/"/>
    
    
    <category term="JS" scheme="http://119.23.250.219/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>第一篇博客</title>
    <link href="http://119.23.250.219/2022/03/17/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>http://119.23.250.219/2022/03/17/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</id>
    <published>2022-03-17T03:08:50.000Z</published>
    <updated>2022-03-19T11:11:28.413Z</updated>
    
    <content type="html"><![CDATA[<h2 id="这是h1标题"><a href="#这是h1标题" class="headerlink" title="这是h1标题"></a>这是h1标题</h2>        <div id="aplayer-XlMLvqLb" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-XlMLvqLb"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "她的",              author: "周杰伦",              url: "https://music.163.com/song?id=1500883818&userid=513419751",              pic: "",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;这是h1标题&quot;&gt;&lt;a href=&quot;#这是h1标题&quot; class=&quot;headerlink&quot; title=&quot;这是h1标题&quot;&gt;&lt;/a&gt;这是h1标题&lt;/h2&gt;
        &lt;div id=&quot;aplayer-XlMLvqLb&quot; class=&quot;aplayer aplaye</summary>
      
    
    
    
    
    <category term="练习" scheme="http://119.23.250.219/tags/%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
</feed>
